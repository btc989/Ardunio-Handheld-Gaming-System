//Code origin:https://github.com/monur/Arduino-Uno-PCD8544-Pong/blob/master/Pong.ino
//Bluetooth refrence: https://github.com/pcantin/bt2bt_HCa/blob/master/bt2bt_HCa.ino

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
//Set up 

#define screenHeight 48
#define screenHeight 84

#define PIN_SCE   7
#define PIN_RESET 6
#define PIN_DC    5
#define PIN_SDIN  11
#define PIN_SCLK  13
//define screen pins
#define cs 10
#define dc 9
#define rst 8

//Enable bluetooth communication
#include <SoftwareSerial.h>
//Set up the first bluetooth port(port values may interchange)
int BluetoothPort1 = 13;
int BluetoothPort2 = 12;
//Set up serial comunication
SoftwareSerial BTComunication(BluetoothPort1,BluetoothPort2);
//ball and pong paddle information
int barWidth = 16;
int barHeight = 4;
int ballPerimeter = 4;
unsigned int bar1X = 0;
unsigned int bar1Y = 0;
unsigned int bar2X = 0;
unsigned int bar2Y = screenHeight * 8 - barHeight;
int ballX = 0;
int ballY = 0;
boolean isBallUp = false;
boolean isBallRight = true;
//Gameplay Visual information
byte pixels[screenHeight][screenHeight];
unsigned long lastRefreshTime;
const int refreshInterval = 150;
//Game data information
byte gameState = 1;
byte ballSpeed = 2;
byte player1WinCount = 0;
byte player2WinCount = 0;
byte hitCount = 0;
SoftwareSerial BTSerial(BluetoothPort1, BluetoothPort2);
//Determines which reciever is which
void BtSetCmdMode(int i_cmdMode = 1){
    //Debug text
    Serial.print("BtSetCmdMode ");    
    Serial.println(i_cmdMode);    
  BtReset();
  //If a one is sent,set this receiver as master
  BTSerial.begin((1 == i_cmdMode)?38400:57600);//57600
}

//Set up master and slave receiver
void BtSetupRole(int i_isMaster = 1){
  BTSerial.begin(38400);
  BtSetCmdMode(1);
  BTSerial.println("AT");
  delay(1000);
  BTSerial.println("AT+UART=57600,0,0");
  delay(1000);
  //Debug to determine slave and master drivers have been set up correctly
  if(0 == i_isMaster){
    BTSerial.println("AT+ROLE=0");
    Serial.println("Set as Slave");
  } else {
    BTSerial.println("AT+ROLE=1");
    Serial.println("Set as Master");
  }
  delay(1000); 

  BtSetCmdMode(0); 
}

void BtReset(void){
    Serial.println("BtReset");    
  BTSerial.flush();
  delay(500);
  
  //Method 1: Using the power
  digitalWrite(gPowerPin, LOW);  
  delay(2000); 
  digitalWrite(gPowerPin, HIGH);
  
/*
  //Method 2: Using the reset pin
  digitalWrite(gResetPin, LOW);
  delay(2000);
  digitalWrite(gResetPin, HIGH);
  */
  delay(500);
}

void BtStartMaster(void){
  BtSetCmdMode(1);
  
  BTSerial.println("AT+INIT");
  Serial.println("AT command: AT+INIT");
  delay(500); 
  BTSerial.println("AT+LINK=13,3,191407");
  Serial.println("AT command: AT+LINK=");
  delay(100); 

  BtSetCmdMode(0);
}
void setup(){
  Serial.begin(9600);
  //Set up screen using TF
   display.begin();
  display.clearDisplay();
  display.setContrast(70);
  display.setTextSize(1);
  display.setTextColor(BLACK);
  //Make sure there is no Bluetooth info accidently stored
  BTComunication.flush();
  //Set game to in game state
  restartGame();
   if(1 == gIsMaster){
   BtSetupRole(1);
   BtStartMaster();
 }else{
   BtSetupRole(0);
 } 
}

void loop(){
  unsigned long now = millis();
  if(now - lastRefreshTime > refreshInterval){
      update();
      refreshScreen();
      lastRefreshTime = now;  
  }  
}

void restartGame(){
   //re-initialize gameplay info
   ballSpeed = 1;
   gameState = 1;
   //Reinitialize ball information 
   ballX = random(0, 60);
   ballY = 20;
   isBallUp = false; 
   isBallRight = true;
   hitCount = 0;
   BTComunication.flush();
}

void refreshScreen(){
  if(gameState == 1){
    for(int y = 0; y <screenHeight ; y++){
        for(int x = 0; x < screenHeight; x++){
           byte pixel = 0x00;
           int realY = y * 8;
           // draw ball if in the frame
           if(x >= ballX && x <= ballX + ballPerimeter -1 && ballY + ballPerimeter > realY && ballY < realY + 8 ){
             byte ballMask = 0x00;
             for(int i = 0; i < realY + 8 - ballY; i++){
               ballMask = ballMask >> 1;
               if(i < ballPerimeter)
                 ballMask = 0x80 | ballMask;
             }
             pixel = pixel | ballM0ask;
           }
           
           // draw bars if in the frame
           if(x >= bar1X && x <= bar1X + barWidth -1 && bar1Y + barHeight > realY && bar1Y < realY + 8 ){
             byte barMask = 0x00;
             for(int i = 0; i < realY + 8 - bar1Y; i++){
               barMask = barMask >> 1;
               if(i < barHeight)
                 barMask = 0x80 | barMask;
             }
             pixel = pixel | barMask;
           }
           
           if(x >= bar2X && x <= bar2X + barWidth -1 && bar2Y + barHeight > realY && bar2Y < realY + 8 ){
             byte barMask = 0x00;
             for(int i = 0; i < realY + 8 - bar2Y; i++){
               barMask = barMask >> 1;
               if(i < barHeight)
                 barMask = 0x80 | barMask;
             }
             pixel = pixel | barMask;
           }
         }
    }
  } else if(gameState == 2){
      
  }
}

void update(){
  if(gameState == 1){
     int barMargin = screenHeight - barWidth;
     //Input for player
     int pot1 = analogRead(A0); 
    //values for analog movement(P1)
     if (pot1 == [0,200]){
      bar1 +=1; 
     }
     if (pot1 == [201,400]){
      bar1 -=1;
     }
     
    //prevent player one from moving up
     if(bar1 > barMargin) bar1 = barMargin;
     //Vertical Ball control
     if(isBallUp)
       ballY -= ballSpeed;
     else
       ballY += ballSpeed;
    //Horizontal ball control
     if(isBallRight)
       ballX += ballSpeed;
     else
       ballX -= ballSpeed;
     //check collisions  
     if(ballX < 1){
       isBallRight = true;
       ballX = 0;
     }
     else if(ballX > TFTscreenWidth - ballPerimeter - 1){
       isBallRight = false;
       ballX = TFTscreen.width() - ballPerimeter;
     }
     //Makes sure that the ball does not go past vertical axis 
     if(ballY < barHeight){
       if(ballX + ballPerimeter >= bar1X && ballX <= bar1X + barWidth){ // ball bounces from bar1
         isBallUp = false;
         if(ballX + ballPerimeter/2 < bar1X + barWidth/2)
           isBallRight = false;
         else
           isBallRight = true;
         ballY = barHeight;
         if(++hitCount % 10 == 0 && ballSpeed < 5) 
           ballSpeed++;
       }else{ //player2 wins
         gameState = 2;
         player2WinCount++;
       }
     }
     if(ballY + ballPerimeter > TFTscreen.height() * 8 - barHeight){
       if(ballX + ballPerimeter >= bar2X && ballX <= bar2X + barWidth){ //ball bounces from bar2
         isBallUp = true; 
         if(ballX + ballPerimeter/2 < bar2X + barWidth/2)
           isBallRight = false;
         else
           isBallRight = true;
         ballY = TFTscreen.height() * 8 - barHeight - ballPerimeter;
         if(++hitCount % 10 == 0 && ballSpeed < 5) 
           ballSpeed++;
       }else{ // player 1 wins
         gameState = 2;
         player1WinCount++;
       }
     }
  }else if(gameState == 2){
      for(int i =0; i < 4; i++){
        LCDWrite(LCD_C, 0x0D );  // get rid of this
        delay(300);
        LCDWrite(LCD_C, 0x0C );  //get rid of this 
        delay(300);
      }
      restartGame();
  }  
}
